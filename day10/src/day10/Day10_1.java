package day10;

public class Day10_1 {
	public static void main(String[] args) {
		/*
		 * exception 예외
		 * 개발자가 프로그램을 작성하는 과정에서의 실수 혹은 사용자가 잘못된 값을 입력하는 경우 
		 * 다양하게 발생하는 오류중 개발자가 해결할 수 있는 오류를 예외라고 한다
		 * 
		 * 예외와 에러의 차이
		 * 예외: 연산오류, 솟자 포맷오류 등과 같이 상황에 따라 개발자가 해결할수 있는 오류
		 * 여기서 해결 할수 있다는 의미는 오류 자체를 수정할 수 있다는것이 아니라
		 * 오류가 발생했을때 차선책으로 선택할 수 있게 하는것을 말한다 
		 * 에러: 자바에서 발생하는 오류로 개발자가 해결할 수 없는 오류를 말한다.
		 * 
		 * 자바에서는 예외도 객체다
		 * 예외의 최상위 클래스는 Exception 클래스
		 * 에러의 최상위 클래스는 Error 클래스
		 * 
		 * 이 2개의 클래스는 모두 Throwable 클래스를 상속받는다 
		 * Throwable 클래스의 모든 기능을 포함한다.
		 * 
		 * Exception 클래스는 checked, unchecked ecxeption클래스로 나뉜다
		 * 
		 * Exception 클래스에게서 직접 상속받은 예외 클래스들이 처리하는 일반예외는 컴파일 전에 예외 발생 문법을 검사
		 * 반면 실행예외는 컴파일 전이 아니라 실행할때 발생하는 예외로 예외처리를 하지 않더라도 실행은 된다
		 * 따라서 프로그램 실행중에 프로그램이 강제종료 되는 이유는 대부분 실행 예외 때문이다 
		 * 
		 * 
		 * 
		 * 1. 일반예외: 일반예외는 예외처리를 하지 않으면 컴파일 자체가 불가능해진다 
		 * 
		 * InterruptedException - Thred.sleep(시간) 매서드는 일정 시간동안 해당 쓰레드를 
		 * 일시정지 상태로 만드는 Thread클래스의 매서드이다.
		 * 이 매서드는 일반예외가 발생할 수 있다. 때문에 반드시 예외처리를 해야한다 
		 * 예외처리를 생략하면 문법오류가 발생해서 컴파일 자체가 불가능 
		 * classNotFoundException
		 * IOException
		 * FileNotFoundException
		 * CloneNotSupportedException
		 * 
		 * 
		 * 
		 * 2. 실행 예외
		 * 실행예외는 실행중에 예외가 발생하면 프로그램이 강제종료된다
		 * 
		 * ArithematicException
		 * 연산 자체가 불가능할때 발생되는 실행예외
		 * 
		 * System.out.println(3/0);
		 * 
		 * ClassCastException
		 * 상속관계에 있는 클래스간에 업캐스팅은 항상 가능하지만 다운캐스팅은 
		 * 항상 가능한것은 아니다 다운 캐스팅이 불가능한 상황에서 시도할때 발생된다
		 * 
		 * ArrayIndexOPutOfException
		 * 배열의 인덱스 잘못 사용할 때
		 * 
		 * 
		 * 자바에서는 예외 처리 구문이 있으면 적절히 예외가 처리됬다고 판단을 하기때문에 프로그램을 강제종료 하지 않는다
		 * 심지어 예외처리 구문 내에 아무코드를 작성하지 않아도 예외처리된것으로 간주하기도 한다
		 */

	}

}
